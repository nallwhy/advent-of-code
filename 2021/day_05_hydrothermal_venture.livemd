<!-- livebook:{"persist_outputs":true} -->

# Day 5: Hydrothermal Venture

## Setup

```elixir
inputs =
  File.read!("./2021/day_05_input.txt")
  |> String.split("\n", trim: true)
  |> Enum.map(fn input ->
    input
    |> String.split(" -> ", trim: true)
    |> Enum.map(fn point ->
      point |> String.split(",") |> Enum.map(&String.to_integer/1)
    end)
  end)
```

```output
[
  [[645, 570], [517, 570]],
  [[100, 409], [200, 409]],
  [[945, 914], 'bC'],
  [[22, 934], [22, 681]],
  [[935, 781], [524, 370]],
  [[750, 304], [854, 408]],
  [[974, 27], [26, 975]],
  [[529, 58], [979, 58]],
  [[979, 515], [550, 944]],
  [[925, 119], [17, 119]],
  [[178, 594], [45, 461]],
  [[252, 366], [92, 206]],
  [[25, 593], [250, 593]],
  [[956, 34], [21, 969]],
  [[200, 671], [200, 369]],
  [[628, 614], [628, 637]],
  [[697, 428], [237, 428]],
  [[554, 40], [554, 949]],
  [[927, 197], [469, 197]],
  [[504, 779], [593, 868]],
  [[227, 882], [227, 982]],
  [[56, 905], '8Q'],
  [[438, 874], [566, 746]],
  [[989, 73], [113, 949]],
  ['R$', [616, 570]],
  [[670, 423], [670, 873]],
  [[100, 435], [291, 435]],
  [[242, 81], [978, 817]],
  [[367, 335], [367, 332]],
  [[890, 584], [116, 584]],
  [[572, 192], [572, 561]],
  [[391, 516], [391, 559]],
  [[525, 62], [525, 540]],
  [[787, 540], [812, 515]],
  [[749, 732], [423, 406]],
  [[745, 911], [694, 911]],
  [[805, 18], [972, 18]],
  [[701, 565], [280, 144]],
  [[930, 92], [129, 893]],
  [[15, 989], [970, 34]],
  [[409, 920], [409, 345]],
  [[192, 743], [312, 863]],
  [[724, 12], [29, 707]],
  [[323, 664], [323, 897]],
  [[161, 423], [391, 653]],
  [[59, 363], [250, 554]],
  [[407, 676], [19, ...]],
  [[449, ...], [...]],
  [[...], ...],
  [...],
  ...
]
```

## Part 1

https://adventofcode.com/2021/day/5

You come across a field of [hydrothermal vents](https://en.wikipedia.org/wiki/Hydrothermal_vent) on the ocean floor! These vents constantly produce large, opaque clouds, so it would be best to avoid them if possible.

They tend to form in **lines**; the submarine helpfully produces a list of nearby lines of vents (your puzzle input) for you to review. For example:

```
0,9 -> 5,9
8,0 -> 0,8
9,4 -> 3,4
2,2 -> 2,1
7,0 -> 7,4
6,4 -> 2,0
0,9 -> 2,9
3,4 -> 1,4
0,0 -> 8,8
5,5 -> 8,2
```

Each line of vents is given as a line segment in the format `x1,y1 -> x2,y2` where `x1`,`y1` are the coordinates of one end the line segment and `x2`,`y2` are the coordinates of the other end. These line segments include the points at both ends. In other words:

* An entry like `1,1 -> 1,3` covers points `1,1`, `1,2`, and `1,3`.
* An entry like `9,7 -> 7,7` covers points `9,7`, `8,7`, and `7,7`.

For now, **only consider horizontal and vertical lines**: lines where either `x1 = x2` or `y1 = y2`.

So, the horizontal and vertical lines from the above list would produce the following diagram:

```
.......1..
..1....1..
..1....1..
.......1..
.112111211
..........
..........
..........
..........
222111....
```

In this diagram, the top left corner is `0,0` and the bottom right corner is `9,9`. Each position is shown as **the number of lines which cover that point** or `.` if no line covers that point. The top-left pair of `1`s, for example, comes from `2,2` -> `2,1`; the very bottom row is formed by the overlapping lines `0,9` -> `5,9` and `0,9` -> `2,9`.

To avoid the most dangerous areas, you need to determine **the number of points where at least two lines overlap**. In the above example, this is anywhere in the diagram with a `2` or larger - a total of **`5`** points.

Consider only horizontal and vertical lines. **At how many points do at least two lines overlap**?

## Solve: Part 1

```elixir
inputs
|> Enum.reduce(%{}, fn input, point_count_map ->
  new_points =
    case input do
      [[x, y1], [x, y2]] -> y1..y2 |> Enum.map(&[x, &1])
      [[x1, y], [x2, y]] -> x1..x2 |> Enum.map(&[&1, y])
      _ -> []
    end

  new_points
  |> Enum.reduce(point_count_map, fn point, point_count_map ->
    point_count_map |> Map.update(point, 1, &(&1 + 1))
  end)
end)
|> Enum.count(fn {_key, value} -> value >= 2 end)
```

```output
4421
```

## Part 2

Unfortunately, considering only horizontal and vertical lines doesn't give you the full picture; you need to also consider **diagonal lines**.

Because of the limits of the hydrothermal vent mapping system, the lines in your list will only ever be horizontal, vertical, or a diagonal line at exactly 45 degrees. In other words:

* An entry like `1,1 -> 3,3` covers points `1,1`, `2,2`, and `3,3`.
* An entry like `9,7 -> 7,9` covers points `9,7`, `8,8`, and `7,9`.

Considering all lines from the above example would now produce the following diagram:

```
1.1....11.
.111...2..
..2.1.111.
...1.2.2..
.112313211
...1.2....
..1...1...
.1.....1..
1.......1.
222111....
```

You still need to determine **the number of points where at least two lines overlap**. In the above example, this is still anywhere in the diagram with a `2` or larger - now a total of **`12`** points.

Consider all of the lines. **At how many points do at least two lines overlap?**

## Solve: Part 2

```elixir
inputs
|> Enum.reduce(%{}, fn input, point_count_map ->
  new_points =
    case input do
      [[x, y1], [x, y2]] -> y1..y2 |> Enum.map(&[x, &1])
      [[x1, y], [x2, y]] -> x1..x2 |> Enum.map(&[&1, y])
      [[x1, y1], [x2, y2]] -> Enum.zip_with(x1..x2, y1..y2, &[&1, &2])
    end

  new_points
  |> Enum.reduce(point_count_map, fn point, point_count_map ->
    point_count_map |> Map.update(point, 1, &(&1 + 1))
  end)
end)
|> Enum.count(fn {_key, value} -> value >= 2 end)
```

```output
18674
```
