<!-- livebook:{"persist_outputs":true} -->

# Day 14: Extended Polymerization

## Setup

```elixir
[polymer_template_input | pair_insertion_rule_input] =
  File.read!("./2021/day_14_input.txt")
  |> String.split("\n", trim: true)

polymer_template = polymer_template_input |> String.graphemes()

pair_insertion_rules =
  pair_insertion_rule_input
  |> Enum.map(fn <<e1::bytes-size(1), e2::bytes-size(1)>> <> " -> " <> <<e::bytes-size(1)>> ->
    [[e1, e2], e]
  end)

{polymer_template, pair_insertion_rules}
```

```output
{["K", "O", "K", "H", "C", "C", "H", "N", "K", "K", "F", "H", "B", "K", "V", "V", "H", "N", "P",
  "N"],
 [
   [["B", "N"], "C"],
   [["O", "S"], "K"],
   [["B", "K"], "C"],
   [["K", "O"], "V"],
   [["H", "F"], "K"],
   [["P", "S"], "B"],
   [["O", "K"], "C"],
   [["O", "C"], "B"],
   [["F", "H"], "K"],
   [["N", "V"], "F"],
   [["H", "O"], "H"],
   [["K", "K"], "H"],
   [["C", "V"], "P"],
   [["S", "C"], "C"],
   [["F", "K"], "N"],
   [["V", "V"], "F"],
   [["F", "N"], "F"],
   [["K", "P"], "O"],
   [["S", "B"], "O"],
   [["K", "F"], "B"],
   [["C", "H"], "K"],
   [["V", "F"], "K"],
   [["B", "H"], "H"],
   [["K", "V"], "F"],
   [["C", "O"], "N"],
   [["P", "K"], "N"],
   [["N", "H"], "P"],
   [["N", "N"], "C"],
   [["P", "P"], "H"],
   [["S", "H"], "N"],
   [["V", "O"], "O"],
   [["N", "C"], "F"],
   [["B", "C"], "B"],
   [["H", "C"], "H"],
   [["F", "S"], "C"],
   [["P", "N"], "F"],
   [["C", "K"], "K"],
   [["C", "N"], "V"],
   [["H", "S"], "S"],
   [["C", "B"], "N"],
   [["O", "F"], "B"],
   [["O", "V"], "K"],
   [["S", "K"], "S"],
   [["H", "P"], "C"],
   [["S", "N"], "P"],
   [["S", ...], "B"],
   [[...], ...],
   [...],
   ...
 ]}
```

## Part 1

The incredible pressures at this depth are starting to put a strain on your submarine. The submarine has [polymerization](https://en.wikipedia.org/wiki/Polymerization) equipment that would produce suitable materials to reinforce the submarine, and the nearby volcanically-active caves should even have the necessary input elements in sufficient quantities.

The submarine manual contains instructions for finding the optimal polymer formula; specifically, it offers a **polymer template** and a list of **pair insertion** rules (your puzzle input). You just need to work out what polymer would result after repeating the pair insertion process a few times.

For example:

```
NNCB

CH -> B
HH -> N
CB -> H
NH -> C
HB -> C
HC -> B
HN -> C
NN -> C
BH -> H
NC -> B
NB -> B
BN -> B
BB -> N
BC -> B
CC -> N
CN -> C
```

The first line is the **polymer template** - this is the starting point of the process.

The following section defines the **pair insertion** rules. A rule like `AB -> C` means that when elements `A` and `B` are immediately adjacent, element `C` should be inserted between them. These insertions all happen simultaneously.

So, starting with the polymer template `NNCB`, the first step simultaneously considers all three pairs:

* The first pair (`NN`) matches the rule `NN -> C`, so element `C` is inserted between the first `N` and the second `N`.
* The second pair (`NC`) matches the rule `NC` -> `B`, so element `B` is inserted between the `N` and the `C`.
* The third pair (`CB`) matches the rule `CB` -> `H`, so element `H` is inserted between the `C` and the `B`.

Note that these pairs overlap: the second element of one pair is the first element of the next pair. Also, because all pairs are considered simultaneously, inserted elements are not considered to be part of a pair until the next step.

After the first step of this process, the polymer becomes `NCNBCHB`.

Here are the results of a few steps using the above rules:

```
Template:     NNCB
After step 1: NCNBCHB
After step 2: NBCCNBBBCBHCB
After step 3: NBBBCNCCNBBNBNBBCHBHHBCHB
After step 4: NBBNBNBBCCNBCNCCNBBNBBNBBBNBBNBBCBHCBHHNHCBBCBHCB
```

This polymer grows quickly. After step 5, it has length 97; After step 10, it has length 3073. After step 10, `B` occurs 1749 times, `C` occurs 298 times, `H` occurs 161 times, and `N` occurs 865 times; taking the quantity of the most common element (`B`, 1749) and subtracting the quantity of the least common element (`H`, 161) produces `1749 - 161 = 1588`.

Apply 10 steps of pair insertion to the polymer template and find the most and least common elements in the result. **What do you get if you take the quantity of the most common element and subtract the quantity of the least common element?**

<!-- livebook:{"branch_parent_index":0} -->

## Solve: Part 1

```elixir
defmodule Day14.Polymerizer do
  def run(polymer_template, step) do
    do_run(polymer_template, step)
  end

  def answer(polymer) do
    {{_, min_frequency}, {_, max_frequency}} =
      polymer
      |> Enum.frequencies()
      |> Enum.min_max_by(fn {_e, frequency} -> frequency end)

    max_frequency - min_frequency
  end

  defp do_run(polymer, _remain_step = 0) do
    polymer
  end

  defp do_run(polymer, remain_step) do
    new_polymer =
      polymer
      |> Enum.chunk_every(2, 1)
      |> Enum.reduce([], fn
        [e1, e2], new_polymer -> insert(e1, e2, new_polymer)
        [e_last], new_polymer -> [e_last | new_polymer]
      end)
      |> Enum.reverse()

    do_run(new_polymer, remain_step - 1)
  end

  pair_insertion_rules
  |> Enum.map(fn [[e1, e2], e] ->
    def insert(unquote(e1), unquote(e2), polymer) do
      [unquote(e), unquote(e1) | polymer]
    end
  end)
end

alias Day14.Polymerizer

Polymerizer.run(polymer_template, 40)
|> Polymerizer.answer()
```

```output
40
39
38
37
36
35
34
33
32
31
30
29
28
27
26
25
24
23
22
21
20
19
18
17
```

## Part 2

The resulting polymer isn't nearly strong enough to reinforce the submarine. You'll need to run more steps of the pair insertion process; a total of **40 steps** should do it.

In the above example, the most common element is `B` (occurring `2192039569602` times) and the least common element is `H` (occurring `3849876073` times); subtracting these produces `2188189693529`.

Apply `40` steps of pair insertion to the polymer template and find the most and least common elements in the result. **What do you get if you take the quantity of the most common element and subtract the quantity of the least common element?**

<!-- livebook:{"branch_parent_index":0} -->

## Solve: Part 2

```elixir
defmodule Day14.Polymerizer do
  def run(polymer_template, step) do
    pair_count_map =
      polymer_template
      |> Enum.chunk_every(2, 1, :discard)
      |> Enum.frequencies()

    do_run(pair_count_map, step)
  end

  def answer(polymer_template, pair_count_map) do
    first_e = polymer_template |> List.first()
    last_e = polymer_template |> List.last()

    {{min_e, min_frequency}, {max_e, max_frequency}} =
      pair_count_map
      |> Enum.reduce(%{}, fn {[e1, e2], count}, frequncies ->
        frequncies
        |> Map.update(e1, count, &(&1 + count))
        |> Map.update(e2, count, &(&1 + count))
      end)
      |> Enum.min_max_by(fn {_e, frequency} -> frequency end)

    min_frequency =
      case min_e in [first_e, last_e] do
        true -> min_frequency + 1
        false -> min_frequency
      end

    max_frequency =
      case max_e in [first_e, last_e] do
        true -> max_frequency + 1
        false -> max_frequency
      end

    div(max_frequency - min_frequency, 2)
  end

  defp do_run(pair_count_map, _remain_step = 0) do
    pair_count_map
  end

  defp do_run(pair_count_map, remain_step) do
    new_pair_count_map =
      pair_count_map
      |> Enum.reduce(%{}, fn {[e1, e2], count}, new_pair_count_map ->
        new_pair_count_map
        |> insert_pairs([e1, e2], count)
      end)

    do_run(new_pair_count_map, remain_step - 1)
  end

  pair_insertion_rules
  |> Enum.map(fn [[e1, e2], e] ->
    def insert_pairs(pair_count_map, [unquote(e1), unquote(e2)], count) do
      pair_count_map
      |> Map.update([unquote(e1), unquote(e)], count, &(&1 + count))
      |> Map.update([unquote(e), unquote(e2)], count, &(&1 + count))
    end
  end)
end

alias Day14.Polymerizer

Polymerizer.run(polymer_template, 40)
|> then(fn pair_count_map -> Polymerizer.answer(polymer_template, pair_count_map) end)
```

```output
3941782230241
```
